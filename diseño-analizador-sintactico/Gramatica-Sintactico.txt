Axioma = B
NoTerminales = { A B C D E F G H I J K L M N O P Q R S T U V W F1 F2 F3 }
Terminales = { && == - -- ( ) = ; , { } id ent cad log let alert input return for if number boolean string function }
Producciones = {
B -> D
D -> F D
D -> G D
D -> lambda
G -> if ( E ) S
G -> S
S -> H ;
H -> id ( I )
I -> E J
J -> , E J
J -> lambda
I -> lambda
S -> K ;
K -> id = E
S -> alert ( E ) ;
S -> input ( id ) ;
S -> return L ;
L -> E
L -> lambda
G -> let M T id ;
M -> lambda
T -> number
T -> boolean
T -> string
G -> for ( N ; E ; O ) { C }
N -> K
N -> lambda
O -> K
O -> -- id
O -> lambda
C -> G C
C -> lambda
F -> F1 F2 F3
F1 -> function P Q id
P -> lambda
Q -> T
Q -> lambda
F2 -> ( A )
A -> T id AA
A -> lambda
AA -> , T id AA
AA -> lambda
F3 -> { C }
E -> E && R
E -> R
R -> R == U
R -> U
U -> U - V
U -> V
V -> -- id
V -> id
V -> ( E )
V -> H
V -> ent
V -> cad
V -> log
}
