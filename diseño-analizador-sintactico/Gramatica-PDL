Axioma = Y
NoTerminales = { Y P B F E R U V D L S X Q T Z F1 F2 F3 A C H K }
Terminales = { && == + - -- ( ) = ; , { } id ent cad log let alert input return for if number boolean string function }
Producciones = {
Y -> P
P -> B P
P -> F P
P -> lambda
E -> E && R
E -> R
R -> R == U 
R -> U
U -> U + V
U -> U - V
U -> V
V -> --id
V -> id
V -> ( E )
V -> id ( L )
V -> ent
V -> cad
V -> log
S -> id = E ;
S -> id ( L ) ;
S -> alert ( E ) ; 
S -> input ( id ) ;
S -> return X ;
X -> E
X -> lambda
L -> E Q
L -> lambda
Q -> , E Q
Q -> lambda
B -> if ( E ) S
B -> let T id ;
B -> S
B -> for ( D ; E ; Z ) { C }
D -> id = E
D -> lambda
Z -> id = E
Z -> -- id
Z -> lambda
T -> number 
T -> boolean
T -> string
F -> F1 F2 F3
F1 -> function H id 
F2 -> ( A )
F3 -> { C }
H -> T 
H -> lambda
A -> T id K 
A -> lambda
K -> , T id K
K -> lambda
C -> B C
C -> lambda
}